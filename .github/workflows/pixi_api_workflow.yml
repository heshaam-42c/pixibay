# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow locates REST API file contracts
# (Swagger or OpenAPI format, v2 and v3, JSON and YAML)
# and runs 300+ security checks on them using 42Crunch Security Audit technology.
#
# Documentation is located here: https://docs.42crunch.com/latest/content/tasks/integrate_github_actions.htm
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a free 42Crunch account at https://platform.42crunch.com/register
#
# 2. Follow steps at https://docs.42crunch.com/latest/content/tasks/integrate_github_actions.htm
#    to create an API Token on the 42Crunch platform
#
# 3. Add a secret in GitHub as explained in https://docs.42crunch.com/latest/content/tasks/integrate_github_actions.htm,
#    store the 42Crunch API Token in that secret, and supply the secret's name as api-token parameter in this workflow
#
# If you have any questions or need help contact https://support.42crunch.com

name: "pixi-api-workflow"

# follow standard Code Scanning triggers
on: 
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  PLATFORM_URL: https://demolabs.42crunch.cloud
  PLATFORM_SERVICE_ENDPOINT: services.demolabs.42crunch.cloud:8001
  TOKEN_ENV_VAR: ACCESS_TOKEN
  PIXI_TARGET_URL: http://localhost:8090/api

permissions:
  contents: read

jobs:
  run_42c_audit:
    environment: 42Crunch
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for 42Crunch/api-security-audit-action to upload results to Github Code Scanning
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: 42crunch-static-api-testing
        uses: 42crunch/api-security-audit-action@v3
        with:
          api-token: ${{ secrets.API_TOKEN }}
          platform-url: ${{ env.PLATFORM_URL}}
          default-collection-name: Pixi-Discovery--${{ github.ref_name }}
          # Upload results to Github code scanning
          upload-to-code-scanning: true
          log-level: debug
          json-report: audit-action-report-${{ github.run_id }}
          sarif-report: 42c-audit-report-${{ github.run_id }}.sarif
          ignore-failures: true
      - name: save-audit-report
        if: always()        
        uses: actions/upload-artifact@v4
        with:
          name: audit-action-report-${{ github.run_id }}
          path: audit-action-report-${{ github.run_id }}.json
          if-no-files-found: error
      - name: save-audit-sarif-report
        if: always()        
        uses: actions/upload-artifact@v4
        with:
          name: 42c-audit-sarif-report-${{ github.run_id }}
          path: 42c-audit-report-${{ github.run_id }}.sarif
          if-no-files-found: warn

  # We use the output of the previous step to scan the APIs       
  run_42c_scan:
    runs-on: ubuntu-latest
    needs: run_42c_audit
    environment: 42Crunch
    permissions:        
      contents: read # for actions/checkout to fetch code
      security-events: write # for 42Crunch/api-security-audit-action to upload results to Github Code Scanning

    services:
      pixidb:
        image: 42crunch/pixi:mongo
        options: >-
          --quiet
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
      app:
        image: 42crunch/pixi:v4.7
        options: --link pixidb
        ports:
          - 8090:8090

    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: download_audit_report    
        uses: actions/download-artifact@v4
        with:
          name: audit-action-report-${{ github.run_id }}  
      # Scan V2
      - name: get pixi api id
        id: get_pixi_api_id
        run: |
          apiId=$(cat ./audit-action-report-${{ github.run_id }}.json | jq -r '.audit.report.${{ vars.PIXI_OAS_PATH }}.apiId')
          echo "PIXI_API_UUID=$apiId" >> $GITHUB_OUTPUT
          cat audit-action-report-${{ github.run_id }}.json
      - name: get_pixi_scan_conf_alias
        id: parse_alias
        run: |
          aliasId=$(cat ./.42c/conf.yaml | yq '.apis.${{ vars.PIXI_OAS_PATH }}.alias')
          echo "PIXI_SCAN_ALIAS=$aliasId" >> $GITHUB_OUTPUT
      - name: get_pixi_token
        id: get_pixi_token
        run: | 
          login_response=$(python .42c/scripts/pixi-login.py -u misty94@demo.mail -p ball -t ${{ env.PIXI_TARGET_URL }})
          echo $login_response
          echo "PIXI_TOKEN=$login_response" >> $GITHUB_OUTPUT
          api_url="http://localhost:8090/api/user/register"
          json_data_user_inbound='{"user": "scanuser@test.com","pass": "hellopixi","name": "Scan Test User","is_admin": false,"account_balance": 1000}'
          json_data_user_common='{"user": "attacks-demo@acme.com","pass": "hellopixi","name": "Attack User","is_admin": false,"account_balance": 1000}'
          curl -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/json" -d "$json_data_user_inbound" "$api_url"
          curl -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type: application/json" -d "$json_data_user_common" "$api_url"
      - name: upload_v2_scan_config
        id: upload_v2_scan_config
        run: | 
            scanconfig_response=$(python .42c/scripts/scan_v2_config.py --quiet ${{ secrets.API_TOKEN }} ${{steps.get_pixi_api_id.outputs.PIXI_API_UUID}} -f .42c/scan/${{ steps.parse_alias.outputs.PIXI_SCAN_ALIAS }}/scanconf.json -n github-actions-local -p ${{env.PLATFORM_URL}})
            echo $scanconfig_response
            echo "SCANV2_TOKEN=$scanconfig_response" >> $GITHUB_OUTPUT
      - name: 42crunch-dynamic-api-testing
        run: |
          docker pull ${{vars.SCAN_AGENT_V2}}
          docker run --network=host -e SCAN_TOKEN=${{ steps.upload_v2_scan_config.outputs.SCANV2_TOKEN }} -e SCAN42C_HOST=${{ env.PIXI_TARGET_URL }} -e PLATFORM_SERVICE=${{ env.PLATFORM_SERVICE_ENDPOINT }} ${{vars.SCAN_AGENT_V2}}
      # - name: Sleep for 75 seconds
      #   run: sleep 75s
      #   shell: bash