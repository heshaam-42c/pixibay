# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow locates REST API file contracts
# (Swagger or OpenAPI format, v2 and v3, JSON and YAML)
# and runs 300+ security checks on them using 42Crunch Security Audit technology.
#
# Documentation is located here: https://docs.42crunch.com/latest/content/tasks/integrate_github_actions.htm
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a free 42Crunch account at https://platform.42crunch.com/register
#
# 2. Follow steps at https://docs.42crunch.com/latest/content/tasks/integrate_github_actions.htm
#    to create an API Token on the 42Crunch platform
#
# 3. Add a secret in GitHub as explained in https://docs.42crunch.com/latest/content/tasks/integrate_github_actions.htm,
#    store the 42Crunch API Token in that secret, and supply the secret's name as api-token parameter in this workflow
#
# If you have any questions or need help contact https://support.42crunch.com

name: "42crunch_audit_scan"

# follow standard Code Scanning triggers
on: 
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  PLATFORM_URL: https://demolabs.42crunch.cloud
  PLATFORM_SERVICE_ENDPOINT: services.demolabs.42crunch.cloud:8001
  TOKEN_ENV_VAR: ACCESS_TOKEN
  PIXI_SCAN_CONFIG: github-actions-cicd

permissions:
  contents: read

jobs:
  run_42c_audit:
    environment: 42Crunch
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for 42Crunch/api-security-audit-action to upload results to Github Code Scanning
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: 42crunch-static-api-testing
        uses: 42crunch/api-security-audit-action@v3
        with:
          api-token: ${{ secrets.API_TOKEN }}
          platform-url: ${{ env.PLATFORM_URL}}
          default-collection-name: GitHubActions heshaam-42c/Pixi--${{ github.ref_name }}
          # Upload results to Github code scanning
          upload-to-code-scanning: true
          log-level: debug
          json-report: audit-action-report-${{ github.run_id }}
          sarif-report: 42Crunch_AuditReport_${{ github.run_id }}.sarif
          ignore-failures: false
          api-tags: ${{ vars.X42C_CATEGORY_NAME }}:${{ vars.X42C_TAG_NAME }}
      - name: save-audit-report
        if: always()        
        uses: actions/upload-artifact@v4
        with:
          name: audit-action-report-${{ github.run_id }}
          path: audit-action-report-${{ github.run_id }}.json
          if-no-files-found: error
      - name: save-audit-sarif-report
        if: always()        
        uses: actions/upload-artifact@v4
        with:
          name: 42Crunch_AuditReport_${{ github.run_id }}
          path: 42Crunch_AuditReport_${{ github.run_id }}.sarif
          if-no-files-found: warn

  # We use the output of the previous step to scan the APIs       
  run_42c_scan:
    runs-on: ubuntu-latest
    needs: run_42c_audit
    environment: 42Crunch
    permissions:        
      contents: read # for actions/checkout to fetch code
      security-events: write # for 42Crunch/api-security-audit-action to upload results to Github Code Scanning
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: download_audit_report    
        uses: actions/download-artifact@v4
        with:
          name: audit-action-report-${{ github.run_id }}  
      # Get the API ID from the audit report
      - name: get pixi api id
        id: get_pixi_api_id
        run: |
          apiId=$(cat ./audit-action-report-${{ github.run_id }}.json | jq -r '.audit.report.${{ vars.PIXI_OAS_PATH }}.apiId')
          echo "PIXI_API_UUID=$apiId" >> $GITHUB_OUTPUT
          cat audit-action-report-${{ github.run_id }}.json
      # - name: tag_apis
      #   id: add_api_tag
      #   run: | 
      #     addtag_response=$(python .42c/scripts/tag_apis.py -u ${{steps.get_pixi_api_id.outputs.PIXI_API_UUID}} -c ${{ vars.X42C_CATEGORY_NAME }} -n ${{ vars.X42C_TAG_NAME }} -t ${{ secrets.API_TOKEN }} -p ${{env.PLATFORM_URL}})
      #     echo $addtag_response
      # Scan V2
      - name: get_pixi_scan_conf_alias
        id: parse_alias
        run: |
          aliasId=$(cat ./.42c/conf.yaml | yq '.apis.${{ vars.PIXI_OAS_PATH }}.alias')
          echo "PIXI_SCAN_ALIAS=$aliasId" >> $GITHUB_OUTPUT
      - name: upload_v2_scan_config
        id: upload_v2_scan_config
        run: | 
            scanconfig_response=$(python .42c/scripts/scan_v2_config.py --quiet ${{ secrets.API_TOKEN }} ${{steps.get_pixi_api_id.outputs.PIXI_API_UUID}} -f .42c/scan/${{ steps.parse_alias.outputs.PIXI_SCAN_ALIAS }}/scanconf.json -n ${{ env.PIXI_SCAN_CONFIG }} -p ${{env.PLATFORM_URL}})
            echo $scanconfig_response
            echo "SCANV2_TOKEN=$scanconfig_response" >> $GITHUB_OUTPUT
      - name: 42crunch-dynamic-api-testing
        run: |
            docker pull ${{vars.SCAN_AGENT_V2}}
            docker run -e SCAN_TOKEN=${{ steps.upload_v2_scan_config.outputs.SCANV2_TOKEN }} -e SCAN42C_HOST=${{ vars.PIXI_TARGET_URL }} -e PLATFORM_SERVICE=${{ env.PLATFORM_SERVICE_ENDPOINT }} ${{vars.SCAN_AGENT_V2}}
            
            echo "Retrieving Scan report URL"
            # List the scan reports for the target API and save the Task ID for github-actions
            taskId=$(python .42c/scripts/manage_scanv2_reports.py ${{ secrets.API_TOKEN }} ${{steps.get_pixi_api_id.outputs.PIXI_API_UUID}} -o list -p ${{ env.PLATFORM_URL}} -q | grep ${{ env.PIXI_SCAN_CONFIG }} | cut -d',' -f1)
            echo "Task ID - $taskId"

            configId=$(python .42c/scripts/manage_scanv2_reports.py ${{ secrets.API_TOKEN }} ${{steps.get_pixi_api_id.outputs.PIXI_API_UUID}} -o list -p ${{ env.PLATFORM_URL}} -q | grep ${{ env.PIXI_SCAN_CONFIG }} | cut -d',' -f2)
            echo "Config ID - $configId"

            # Retrieve the scan report for the target API using Task ID
            python .42c/scripts/manage_scanv2_reports.py ${{ secrets.API_TOKEN }} ${{steps.get_pixi_api_id.outputs.PIXI_API_UUID}} -o retrieve -p ${{ env.PLATFORM_URL}} -t $taskId
            # Print the scan report URL using Scan Config ID
            echo "Scan report - ${{ env.PLATFORM_URL }}/apis/${{steps.get_pixi_api_id.outputs.PIXI_API_UUID}}/scan/report?configId=$configId"
      # # Scan V2 with ScanD-Manager
      # - name: 42crunch-dynamic-api-testing-scand
      #   uses: fjogeleit/http-request-action@v1
      #   with:
      #     url: ${{ vars.SCAND_MANAGER_URL }}
      #     method: POST
      #     contentType: "application/json"
      #     customHeaders: '{"Accept": "application/json"}'
      #     data: '{"token": "${{ steps.upload_v2_scan_config.outputs.SCANV2_TOKEN }}","name": "scand-${{ github.run_id }}-${{ github.run_attempt }}","platformService": "${{ env.PLATFORM_SERVICE_ENDPOINT }}","scandImage": "${{vars.SCAN_AGENT_V2}}","expirationTime": 600,"env": { "SCAN42C_HOST": "${{ vars.PIXI_TARGET_URL }}"}}'
      # # Scan V1
      # - name: get_pixi_token
      #   id: get_pixi_token
      #   run: | 
      #     login_response=$(python .42c/scripts/pixi-login.py -u ${{ vars.PIXI_USER_NAME }} -p ${{ secrets.USER_PASS }} -t ${{ vars.PIXI_TARGET_URL }})
      #     echo $login_response
      #     echo "PIXI_TOKEN=$login_response" >> $GITHUB_OUTPUT
      # - name: upload_v1_scan_config
      #   id: upload_v1_scan_config
      #   run: | 
      #     scanconfig_response=$(python .42c/scripts/scan_v1_config.py ${{github.server_url}}/${{ github.repository }} ${{ github.ref }} ${{ secrets.API_TOKEN }} '{$ACCESS_TOKEN}' ${{env.PLATFORM_URL}})
      #     echo $scanconfig_response
      #     echo "SCANV1_TOKEN=$scanconfig_response" >> $GITHUB_OUTPUT
      # - name: 42crunch-dynamic-api-testing
      #   run: |
      #     docker pull ${{vars.SCAN_AGENT_V1}}
      #     docker run -e SCAN_TOKEN=${{ steps.upload_v1_scan_config.outputs.SCANV1_TOKEN }} -e SECURITY_ACCESS_TOKEN=${{ steps.get_pixi_token.outputs.PIXI_TOKEN }} -e PLATFORM_SERVICE=${{ env.PLATFORM_SERVICE_ENDPOINT }} ${{vars.SCAN_AGENT_V1}}
      #     echo "Scan report: ${{ env.PLATFORM_URL }}/apis/${{steps.get_pixi_api_id.outputs.PIXI_API_UUID}}/scan"
      # # Scan V1 with ScanD-Manager
      # - name: 42crunch-dynamic-api-testing-scand
      #   uses: fjogeleit/http-request-action@v1
      #   with:
      #     url: ${{ vars.SCAND_MANAGER_URL }}
      #     method: POST
      #     contentType: "application/json"
      #     customHeaders: '{"Accept": "application/json"}'
      #     data: '{"token": "${{ steps.upload_v1_scan_config.outputs.SCANV1_TOKEN }}","name": "scand-${{ github.run_id }}-${{ github.run_attempt }}","platformService": "${{ env.PLATFORM_SERVICE_ENDPOINT }}","scandImage": "${{vars.SCAN_AGENT_V1}}","expirationTime": 600,"env": { "SECURITY_ACCESS_TOKEN": "${{ steps.get_pixi_token.outputs.PIXI_TOKEN }}"}}'
      # # Scan SARIF report generation
      # - name: upload scan results
      #   uses: 42crunch/cicd-github-actions@v1
      #   with:
      #     api-token: ${{ secrets.API_TOKEN }}
      #     platform-url: ${{ env.PLATFORM_URL}}
      #     audit-report-path: audit-action-report-${{ github.run_id }}.json
      #     convert-to-sarif: scan-report-${{ github.run_id }}.sarif
      #     upload-sarif: true
      #     check-sqg: false
      # - name: save-sarif-report
      #   if: always()        
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: sarif-scan-report-${{ github.run_id }}
      #     path: scan-report-${{ github.run_id }}.sarif
      #     if-no-files-found: error
      # # Code scanning SARIF upload
      # - name: Upload SARIF file
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     # Path to SARIF file relative to the root of the repository
      #     sarif_file: scan-report-${{ github.run_id }}.sarif
      #     # Optional category for the results
      #     # Used to differentiate multiple results for one commit
      #     category: 42Crunch REST API Dynamic Security Testing

  update-42c-protect:
    runs-on: ubuntu-latest
    needs: run_42c_audit
    environment: 42Crunch
    permissions:        
      contents: read # for actions/checkout to fetch code
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
      - name: download_audit_report    
        uses: actions/download-artifact@v4
        with:
          name: audit-action-report-${{ github.run_id }}  
      - name: update-api-firewall
        run: |
          apiId=$(cat ./audit-action-report-${{ github.run_id }}.json | jq -r '.audit.report.${{ vars.PIXI_OAS_PATH }}.apiId')
          python .42c/scripts/protection.py $apiId ${{ env.PLATFORM_URL}} ${{ secrets.API_TOKEN }}